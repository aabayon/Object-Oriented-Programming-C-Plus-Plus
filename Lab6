#ifndef RPG_H
#define RPG_H
#include <string>

using namespace std;

const int SKILL_SIZE = 2;

class RPG {
    public:
        RPG();
        RPG(string name, int health, int strength, int defense, string type);

        void setSkills();
        void printAction(string, RPG);
        void updateHealth(int);
        void attack(RPG *);
        void useSkill(RPG *);

        bool isAlive() const;
        string getName() const;
        int getHealth() const;
        int getStrength() const;
        int getDefense() const;

    private:
        string name;
        int health;
        int strength;
        int defense; 
        string type; // warrior, mage, thief, archer
        string skills[SKILL_SIZE];

};
#endif 

#include <iostream>
#include "RPG.h"
#include <array>

using namespace std;

RPG::RPG(){
    name = "NPC";
    health = 100;
    strength = 10; 
    defense = 10; 
    type = "warrior";
    skills [0] = "slash";
    skills [1] = "parry";
}

RPG::RPG(string name, int health, int strength, int defense, string type){
    this->name = name;
    this->health = health;
    this->strength = strength;
    this->defense = defense;
    this->type = type; 

    setSkills();
}

string RPG::getName() const{
    return name;
}
int RPG::getHealth() const{
    return health;
}
int RPG::getStrength() const{
    return strength;
}
int RPG::getDefense() const{
    return defense;
}

void RPG::setSkills() {
    if (type == "mage"){
        skills[0] = "fire";
        skills[1] = "thunder";
    } else if (type == "thief"){
        skills[0] = "pilfer";
        skills[1] = "jab";
    } else if (type == "archer"){
        skills[0] = "parry";
        skills[1] = "crowbow_attack";
    } else {
        skills[0] = "slash";
        skills[1] = "parry";
    }
}

void RPG::printAction(string skill, RPG opponent) {
    printf("%s used %s on %s\n", name.c_str(), skill.c_str(), opponent.getName().c_str());
}

void RPG::updateHealth(int new_health){
    health = new_health;
}

void RPG::attack(RPG * opponent){
    int opp_health = (*opponent).getHealth();
    int opp_def = (*opponent).getDefense();
    int new_health = opp_health - max((strength - opp_def), 0);

    (*opponent).updateHealth(new_health);
}

void RPG::useSkill(RPG * opponent){
    for(int i = 0; i < SKILL_SIZE; i++){
        printf("Skill %i: %s\n", i, skills[i].c_str());
    }

    int chosen_skill_index;
    printf("\nChoose a skill to use.\nEnter 0 or 1 on the terminal: ");
    cin >> chosen_skill_index;
    string chosen_skill = skills[chosen_skill_index];
    printAction(chosen_skill, (*opponent));
    
    attack(opponent);
}

bool RPG::isAlive() const{
 if (health > 0){
    return true;
 }else{
    return false;
 }
}

#include <iostream>
#include "RPG.h"

using namespace std;

void displayStats(RPG player1, RPG player2){
    printf("Wiz Health: %i\t NPC Health: %i\n", player1.getHealth(), player2.getHealth());
}

void displayEnd(RPG player1, RPG player2){
    if (player1.isAlive()){
        printf("Wiz defeated NPC! Good Game!\n");
    }else{
        printf("NPC defeated Wiz!\n");
    }
}

void gameLoop(RPG *player1, RPG *player2){
    while (player1->isAlive() && player2->isAlive()){
        displayStats((*player1), (*player2));
        printf("%s's turn\n\n", player1->getName().c_str());
        player1->useSkill(player2);
        printf("--------------------------------\n");
        
        displayStats((*player1), (*player2));
        printf("%s's turn\n\n", player2->getName().c_str());
        player2->useSkill(player1);
        printf("--------------------------------\n");

    }
    displayEnd(*player1, *player2);
}

int main(){
    RPG p1 = RPG("Wiz", 70, 45, 15, "mage");
    RPG p2 = RPG("NPC",100, 10, 10, "warrior");    

    gameLoop(&p1, &p2);

    return 0;

    printf("%s Current stats:\n", p1.getName().c_str());
    printf("Health: %i\t Strength: %i\t Defense: %i\n\n", p1.getHealth(), p1.getStrength(), p1.getDefense());

    printf("%s Current stats:\n", p2.getName().c_str());
    printf("Health: %i\t Strength: %i\t Defense: %i\n\n", p2.getHealth(), p2.getStrength(), p2.getDefense());

    p1.updateHealth(0);
    printf("Wiz New Health: %i\n");

    p1.isAlive();
    p2.isAlive();

    return 0;
}
